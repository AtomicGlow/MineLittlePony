buildscript {
    repositories {
        jcenter()
        maven {
            name 'forge'
            url 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '1.7.2'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
compileJava.sourceCompatibility = '1.8'
compileJava.targetCompatibility = '1.8'

ext {
    revision = grgit.log().size()
    hash = grgit.head().abbreviatedId
    if (file('.git/shallow').exists()) {
        // don't clone with --depth
        revision = -1
        hash += " shallow"
    }
}

version = "${project.minecraft_version}.${project.version}"

if (project.release != 'RELEASE') {
    version += "-${project.release}"
}
if (project.release == 'SNAPSHOT') {
    version += "-${project.revision}-${project.hash}"
}

group = project.group
description = project.displayname
archivesBaseName = project.name

sourceSets {
    client {
        // Client-only code
        compileClasspath += main.compileClasspath
        compileClasspath += main.output
        compileClasspath += common.output
        ext.refMap = 'minelp.mixin.refmap.json'
    }
    main {
    }

    fml {
        compileClasspath += main.compileClasspath
        compileClasspath += main.output
        compileClasspath += client.output
    }

    // TODO: Disable the hidden "test" sourceset
    // TODO: Disable the resources folders for sourcesets that don't need them
}

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version + "-" + project.minecraft_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            // replace '@VERSION@', project.version

            mods {
                minelittlepony {
                    // TODO: Remember to add /bin/default to the Environment configs
                    // minelittlepony%%C:/.../bin/default
                    source sourceSets.common
                    source sourceSets.client
                    source sourceSets.main
                    source sourceSets.fml

                    // replace '@VERSION@', project.version
                }

                // replace '@VERSION@', project.version
            }
        }
    }

    // replace '@VERSION@', project.version
}

repositories {
//    jcenter()
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }
}

dependencies {
    // TODO: Add HDSkins as a dependency. It won't compile without it.
    // TODO: Add KirinUI as a dependency.

    minecraft 'net.minecraftforge:forge:1.13.2-25.0.90'

    // use the same version as httpclient
    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        transitive = false
    }
}

manifest {
    attributes 'Implementation-Version': "${project.version} (git-${project.hash})"
}

jar {
    from sourceSets.common.output
    from sourceSets.main.output

    from sourceSets.client.output
    from sourceSets.fml.output

//    replace '@VERSION@', project.version

    classifier 'base'
    extension 'jar'
}

task copyBGPones(type: Copy) {

    def illegals = /[^a-z0-9_\/.-]/

    from "skins/Background Ponies"
    // TODO: What is tempDir????
    into temporaryDir

    eachFile {
        if (it.name =~ illegals){
            logger.warn("Sanitizing file with illegal characters: ${it.path}")
            it.name = it.name.replaceAll(/\s/, '_').replaceAll(illegals, '')
        }
    }
}

/*
shadowJar {
//    classifier "mc$minecraft.version"

    // TODO: Remember, we still have to include HDSkins in our build litemod, even if it's a separate repository now

    from sourceSets.common.output

    from sourceSets.client.output
    from sourceSets.fml.output

    exclude "/assets/minelittlepony/textures/entity/pony"
    from(copyBGPones) {
        into "/assets/minelittlepony/textures/entity/pony"
    }

//    replace '@VERSION@', project.version

    dependencies {
        exclude dependency('deobf.org.ow2.asm:')
        exclude dependency('org.spongepowered:mixin:')
        exclude 'META-INF/**'
    }

    relocate 'org.apache.http.entity.mime', 'com.voxelmodpack.repack.org.apache.http.entity.mime'
    exclude 'dummyThing'
    doLast {
        file('build/libs/' + archivesBaseName + '-' + version + '-base.jar').delete();
    }
}

task srgJar(type: Jar) {
    from sourceSets.common.output

    from sourceSets.main.output
    from sourceSets.client.output
    from sourceSets.fml.output

//    replace '@VERSION@', project.version

    classifier "mc$minecraft.version-srg"
}
*/

task horseLib(type: Jar) {
    from sourceSets.common.output

    from sourceSets.main.output

//    replace '@VERSION@', project.version

    baseName = "HoarseLib"
}

//sourceJar.enabled = false

//reobf {
//    srgJar {
//        mappingType = 'SEARGE'
//    }
//
//    shadowJar{}
//}
